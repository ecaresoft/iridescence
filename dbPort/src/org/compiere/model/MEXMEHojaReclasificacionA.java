package org.compiere.model;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.util.Properties;import java.util.logging.Level;import org.compiere.util.CLogger;import org.compiere.util.DB;/** * Modelo para Auditoria de Hoja Clasificacion * * <b>Fecha:</b> 28/Febrero/2006<p> * <b>Modificado: </b> $Author: mrojas $<p> * <b>En :</b> $Date: 2006/08/11 02:26:22 $<p> * * @author Gisela Lee * @version $Revision: 1.5 $ */public class MEXMEHojaReclasificacionA extends X_EXME_Hoja_Reclasificacion_A {    /**	 * 	 */	private static final long serialVersionUID = 1L;	/** Static Logger               */    private static CLogger      log = CLogger.getCLogger (MEXMEHojaReclasificacionA.class);        /**     * @param ctx     * @param ID     */    public MEXMEHojaReclasificacionA(Properties ctx, int ID, String trxName) {        super(ctx, ID, trxName);    }    /**     * @param ctx     * @param rs     */    public MEXMEHojaReclasificacionA(Properties ctx, ResultSet rs, String trxName) {        super(ctx, rs, trxName);    }        /**     * Constructor para generar auditoria a partir de una hoja de reclasificacion     * @param ctx     * @param rs     */    public MEXMEHojaReclasificacionA(MEXMEHojaReclasificacion clas, String trxName) {        this (clas.getCtx(), 0, trxName);        setVersion(MEXMEHojaReclasificacionA.getSiguienteVersion(clas.getCtx(), clas.getEXME_Paciente_ID(), trxName));        setEXME_Paciente_ID(clas.getEXME_Paciente_ID());        setFecha_Impresion(clas.getFecha_Impresion());        setMotivo_Rclasif(clas.getMotivo_Rclasif());        setEXME_Clas_Origen_ID(clas.getEXME_Clas_Origen_ID());        setEXME_Clas_Destino_ID(clas.getEXME_Clas_Destino_ID());        setAD_User_ID(clas.getAD_User_ID());        setFecha_Hosp(clas.getFecha_Hosp());        setFecha_Alta(clas.getFecha_Alta());        setAprobada(clas.isAprobada());        setTipo_Rclas(clas.getTipo_Rclas());        setCancelada(clas.isCancelada());        setAutorizo(clas.getAutorizo());        setVoBo(clas.getVoBo());        setElaboro(clas.getElaboro());        setSuperviso(clas.getSuperviso());    }        /**     * Obtenemos la siguiente version de auditoria para el paciente     * @param ctx El contexto de la aplicacion     * @param EXME_Paciente_ID El paciente a obtener la version     * @return La siguiente version de auditoria      */    public static int getSiguienteVersion(Properties ctx, int EXME_Paciente_ID,            String trxName){   		int version = 1;   		String sql = "SELECT MAX(Version) AS Version FROM EXME_Hoja_Reclasificacion_A " +   			"WHERE EXME_Paciente_ID = ?";   		   		sql = MEXMELookupInfo.addAccessLevelSQL(ctx, sql, "EXME_Hoja_Reclasificacion_A");   		   		PreparedStatement pstmt = null;    	ResultSet rs = null;
    	try{
            pstmt = DB.prepareStatement(sql, trxName);            //pstmt.setInt(1, Env.getAD_Client_ID(ctx));            pstmt.setInt(1, EXME_Paciente_ID);            rs = pstmt.executeQuery();            if(rs.next()){                version = rs.getInt("Version") + 1;            }                	} catch (Exception e) {    		log.log(Level.SEVERE, sql.toString(), e);    	}finally {    		DB.close(rs, pstmt);    	}
        return version;
    }    
}