package org.compiere.model;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.Timestamp;import java.util.Calendar;import java.util.Properties;import java.util.logging.Level;import org.apache.commons.lang.StringUtils;import org.compiere.util.CLogger;import org.compiere.util.Constantes;import org.compiere.util.DB;

/** * Modelo para Pre-Reclasificacion * * <b>Fecha:</b> 08/Febrero/2006<p> * <b>Modificado: </b> $Author: mrojas $<p> * <b>En :</b> $Date: 2006/08/11 02:26:22 $<p> * * @author Gisela Lee * @version $Revision: 1.2 $ */public class MEXMEPreReclas extends X_EXME_Pre_Reclas {    /**	 * 	 */	private static final long serialVersionUID = 1L;	/** Static Logger               */    private static CLogger      log = CLogger.getCLogger (MEXMEPreReclas.class);        /**     * @param ctx     * @param ID     */    public MEXMEPreReclas(Properties ctx, int ID, String trx) {        super(ctx, ID, trx);    }    /**     * @param ctx     * @param rs     */    public MEXMEPreReclas(Properties ctx, ResultSet rs, String trx) {        super(ctx, rs, trx);    }
      /**
   * Obtenemos la clasificacion por paciente     * @param ctx El contexto de la aplicacion     * @param EXME_Paciente_ID El paciente     * @param trxName el nombre de la transaccion      * @return La clasificacion para un paciente      */    public static MEXMEPreReclas getByPaciente(Properties ctx, int EXME_Paciente_ID,             String trxName){        MEXMEPreReclas clas = null;                StringBuilder sql = new StringBuilder(Constantes.INIT_CAPACITY_ARRAY);                 sql.append("SELECT * FROM EXME_Pre_ReClas WHERE EXME_Paciente_ID = ? AND isActive = 'Y' ");                //"AD_Client_ID = ? AND  " +                sql = new StringBuilder(MEXMELookupInfo.addAccessLevelSQL(ctx, sql.toString(), Table_Name));                if (DB.isOracle()) {        	sql.append(" AND ROWNUM = 1 ");        }		sql.append(" ORDER BY CREATED DESC");			    if (DB.isPostgreSQL()) {		    sql = new StringBuilder(DB.getDatabase().addPagingSQL(sql.toString(), 1, 1));	    }		PreparedStatement pstmt = null;		ResultSet rs = null;		try {			pstmt = DB.prepareStatement(sql.toString(), trxName);			//pstmt.setInt(1, Env.getAD_Client_ID(ctx));			pstmt.setInt(1, EXME_Paciente_ID);			rs = pstmt.executeQuery();			if (rs.next()) {				clas = new MEXMEPreReclas(ctx, rs, trxName);			}					} catch (Exception e) {			log.log(Level.SEVERE, "getByPaciente - sql: " + sql, e);		} finally {			DB.close(rs, pstmt);		}		return clas;	}        /**     *  Before Save     *  @param newRecord new     *  @return true     */    protected boolean beforeSave(boolean newRecord) {		//asignar la fecha de vigencia del estudio		MEXMEVigencia vig = MEXMEVigencia.getByADClient(getCtx(), get_TrxName());		if (vig != null) {			Calendar cal = Calendar.getInstance();			if (newRecord) {				cal.setTime(getDateOrdered());				cal.add(Calendar.YEAR, vig.getAnios_Vigencia());				setDateVaidTo(new Timestamp(cal.getTime().getTime()));				MEXMERangoPuntClas puntos = MEXMERangoPuntClas.getByIndice(getCtx(), getTotalPts(),						null);				if (puntos != null)					set_Value("EXME_ClasCliente_ID", puntos.getEXME_ClasCliente_ID());				setEstatus(ESTATUS_Initial);				setIsLocked(true);			}		}		return true;	}        /**     *  After Save     *  @param newRecord new     *  @param success success    *  @return success     */    protected boolean afterSave(boolean newRecord, boolean success) {		if (!success)			return success;		//generamos la auditoria		MEXMEPreReclasA aud = new MEXMEPreReclasA(this, get_TrxName());		if (!aud.save(get_TrxName()))			throw new IllegalStateException("Error al generar la auditoria");		return true;	}}