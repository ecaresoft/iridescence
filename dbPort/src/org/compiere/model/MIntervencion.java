/* Created on 5/06/2005 */package org.compiere.model;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.util.ArrayList;import java.util.List;import java.util.Properties;import java.util.logging.Level;import org.apache.commons.lang.StringUtils;import org.apache.lucene.document.Document;import org.apache.lucene.document.Field;import org.apache.lucene.index.IndexWriter;import org.apache.struts.util.LabelValueBean;import org.compiere.util.CLogger;import org.compiere.util.Constantes;import org.compiere.util.DB;import org.compiere.util.Utilerias;/** * @author YWRY * */public class MIntervencion extends X_EXME_Intervencion {	/** SerialVersionUID */	private static final long	serialVersionUID	= 1L;	/** Static Logger */	private static CLogger		s_log				= CLogger.getCLogger(MIntervencion.class);	/**	 * Constructor	 *	 * @param ctx	 * @param EXME_SignoVitalDet_ID	 * @param trxName	 */	public MIntervencion(Properties ctx, int EXME_Intervencion_ID, String trxName) {		super(ctx, EXME_Intervencion_ID, trxName);	}	/**	 * Constructor	 *	 * @param ctx	 * @param rs	 * @param trxName	 */	public MIntervencion(Properties ctx, ResultSet rs, String trxName) {		super(ctx, rs, trxName);	}	/**	 * Devuelve un objeto a partir del value de la intervenciï¿½n dada	 *	 * @param ctx Contexto	 * @param value value del registro (LIKE)	 * @return La intervencion	 * @throws Exception en caso de ocurrir un error en la consulta	 */	public static MIntervencion getObjIntervencionFromValue(Properties ctx, String value) throws Exception {		return new Query(ctx, Table_Name, " UPPER(EXME_Intervencion.Value) LIKE UPPER(?) ", null)//			.setOnlyActiveRecords(true)//			.setParameters(StringUtils.trimToEmpty(value))//			.addAccessLevelSQL(true)//			.first();	}	/**	 * Obtiene los documentos de la tabla de intervenciones	 *	 * @param ctx Contexto	 * @param w IndexWriter al que perteneceran los documentos	 */	public static void getDocuments(Properties ctx, IndexWriter w) {		final StringBuilder st = new StringBuilder("select m.EXME_Intervencion_ID, m.value, m.name from EXME_Intervencion m");		PreparedStatement pstmt = null;		ResultSet rs = null;		try {			pstmt = DB.prepareStatement(st.toString(), null);			rs = pstmt.executeQuery();			while (rs.next()) {				Document doc = new Document();				doc.add(new Field("label", Utilerias.getMessage(ctx, null, "msj.intervencion"), Field.Store.YES, Field.Index.NOT_ANALYZED));				doc.add(new Field("tabla", MIntervencion.Table_Name, Field.Store.YES, Field.Index.NOT_ANALYZED));				doc.add(new Field("id", rs.getString("EXME_Intervencion_ID"), Field.Store.YES, Field.Index.ANALYZED));				doc.add(new Field("value", rs.getString("value").toUpperCase(), Field.Store.YES, Field.Index.ANALYZED));				doc.add(new Field("name", rs.getString("name").toUpperCase(), Field.Store.YES, Field.Index.ANALYZED));				w.addDocument(doc);			}		} catch (Exception e) {			s_log.log(Level.SEVERE, st.toString(), e);		} finally {			DB.close(rs, pstmt);		}	}	/**	 *	 * @param ctx	 * @param trxName	 * @return	 */	public static List<MIntervencion> get(Properties ctx, String trxName) {		return new Query(ctx, Table_Name, "", null)//			.setOnlyActiveRecords(true)//			// .addAccessLevelSQL(true)// ? porque no se agrega?			.setOrderBy(" EXME_Intervencion.Value ")//			.list();	}	/**	 * Obtiene una lista de las intervenciones por grupo	 *	 * @param ctx	 * @param group	 * @param trxName	 * @return	 */	public static List<MIntervencion> get(Properties ctx, String group, String trxName) {		return new Query(ctx, Table_Name, " proceduregroup=? ", null)//			// .setOnlyActiveRecords(true)// ? porque no se agrega ?			.setParameters(group)//			.addAccessLevelSQL(true)//			.setOrderBy(" Value ")//			.list();	}	/**	 * Obtiene una lista de las intervenciones por grupo	 *	 * @param ctx	 * @param group	 * @param trxName	 * @return	 */	public static List<LabelValueBean> getLVB(Properties ctx, String group, String trxName) {		final List<LabelValueBean> lista = new ArrayList<LabelValueBean>();		final StringBuilder sql = new StringBuilder(Constantes.INIT_CAPACITY_ARRAY);		PreparedStatement pstmt = null;		ResultSet rs = null;		try {			sql.append("SELECT  * FROM EXME_Intervencion WHERE ProcedureGroup=? ");			sql.append(MEXMELookupInfo.addAccessLevelSQL(ctx, " ", Table_Name));			sql.append(" ORDER BY Value");			pstmt = DB.prepareStatement(sql.toString(), trxName);			pstmt.setString(1, group);			rs = pstmt.executeQuery();			while (rs.next()) {				lista.add(new LabelValueBean(rs.getString(COLUMNNAME_Name), rs.getString(COLUMNNAME_EXME_Intervencion_ID)));			}		} catch (Exception e) {			s_log.log(Level.SEVERE, sql.toString(), e);		} finally {			DB.close(rs, pstmt);		}		return lista;	}	/**	 * Get the id from the value. Assumes all records belong to System	 * @param value The value to look by.	 * @return The internal id related to the value.	 */	public static int getIdFromValue(String value) {		int exmeIntervId = -1;		final StringBuilder sql = new StringBuilder("Select EXME_Intervencion_ID ");		sql.append(" FROM EXME_Intervencion WHERE Value = ? ");		exmeIntervId = DB.getSQLValue(null, sql.toString(), value);		return exmeIntervId;	}}