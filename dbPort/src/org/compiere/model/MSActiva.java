package org.compiere.model;

import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.ArrayList;import java.util.List;import java.util.Properties;import java.util.logging.Level;import org.compiere.util.CLogger;import org.compiere.util.Constantes;import org.compiere.util.DB;

public class MSActiva extends X_EXME_SActiva {
    /**	 * 	 */	private static final long serialVersionUID = 1L;	/** Static logger           */    private static CLogger s_log = CLogger.getCLogger(MSActiva.class);
    public MSActiva(Properties ctx, int EXME_SActiva_ID, String trxName) {        super(ctx, EXME_SActiva_ID, trxName);    }
    public MSActiva(Properties ctx, ResultSet rs, String trxName) {        super(ctx, rs, trxName);    }
    /**     *  Obtenemos el nombre de una sustancia activa en especifico     *  @param El identificador de la sustancia activa     *  @return El nombre de la sustancia activa     */    public static String getSActivaName (Properties ctx, long sActiva) throws Exception{       //buscamos la sustancia activa        StringBuilder sql = new StringBuilder("SELECT EXME_SActiva.Name FROM EXME_SActiva "              + "WHERE EXME_SActiva.EXME_SActiva_ID = ? "              + "AND EXME_SActiva.IsActive = 'Y' ");        sql.append(MEXMELookupInfo.addAccessLevelSQL(ctx, " ", "EXME_SActiva"));        return DB.getSQLValueString(null, sql.toString(), sActiva);    }        //19/07/2010 mvrodriguez	/**	 * Método que retorna la lista de Sustancias Activas del catálogo	 * @param ctx requerido	 * @param isActive requerido Constantes.regActive o Constantes.regNotActive	 * @param productId Id del producto a buscar	 * @param nameSubstance Nombre de la substancia a buscar	 * @return List con objetos de tipo MSActiva	 */	public static ArrayList<MSActiva> getSActivasMedicine(Properties ctx, String isActive, int productId, String nameSubstance){		List<MSActiva> lst = new ArrayList<MSActiva>();		StringBuilder sb = new StringBuilder(Constantes.INIT_CAPACITY_ARRAY);		ResultSet result = null;		PreparedStatement pstmt = null;				sb.append("SELECT EXME_SACTIVA.EXME_SACTIVA_ID ");		sb.append("     , EXME_SACTIVA.NAME ");		sb.append("  FROM EXME_SACTIVA ");		sb.append("  LEFT JOIN EXME_PRODUCTSACTIVA ON (EXME_SACTIVA.EXME_SACTIVA_ID = EXME_PRODUCTSACTIVA.EXME_SACTIVA_ID) ");		sb.append("  LEFT JOIN M_PRODUCT ON (EXME_PRODUCTSACTIVA.M_PRODUCT_ID = M_PRODUCT.M_PRODUCT_ID)");		sb.append(" WHERE EXME_SACTIVA.ISACTIVE = ?");		sb.append("   AND M_PRODUCT.ISACTIVE = 'Y'");		if(productId > 0)			sb.append("  AND M_PRODUCT.M_PRODUCT_ID = ? ");		if(nameSubstance.length() > 0)			sb.append("  AND UPPER(EXME_SACTIVA.NAME) LIKE UPPER(?) ");		sb = new StringBuilder(MEXMELookupInfo.addAccessLevelSQL(ctx, sb.toString(),MSActiva.Table_Name));		sb.append(" ORDER BY EXME_SACTIVA.NAME DESC ");		try{			pstmt = DB.prepareStatement(sb.toString(), null);			pstmt.setString(1, isActive);			pstmt.setInt(2, productId);			if(nameSubstance.length() > 0)				pstmt.setString(3, nameSubstance);			result = pstmt.executeQuery();						while(result.next()){				MSActiva pc = new MSActiva(ctx, result, null);				lst.add(pc);			}		}catch(SQLException ex){			s_log.log(Level.SEVERE, "MSActiva at method getSActivas " + ex.getMessage());		} finally{			DB.close(result, pstmt);		}		return (ArrayList<MSActiva>)lst;	}
}
