package org.compiere.process;import java.math.BigDecimal;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.sql.Timestamp;import java.util.logging.Level;import org.compiere.util.DB;import org.compiere.util.Env;import org.adempiere.exceptions.DBException;
/** * Proceso de importaci&oacute;n de la tabla de Subtipos de Producto.<p> * Creado: 10/Mar/2005<p> * Modificado: $Date: 2006/05/15 17:28:16 $<p> * Por: $Author: gisela $<p> *  * @author mrojas * @version $Revision: 1.1 $ */public class ImportOcupacionClas extends SvrProcess {        /** Client to be imported to        */    private int             m_AD_Client_ID = 0;    /** Delete old Imported             */    private boolean         m_deleteOldImported = false;    /** Organization to be imported to  */    private int             m_AD_Org_ID = 0;    /** Effective                       */    private Timestamp       m_DateValue = null;        /**     * Constructor por defecto.     */    public ImportOcupacionClas() {        super();    }    /**     * Preparar: obtener par&aacute;metros     */    protected void prepare() {        ProcessInfoParameter[] para = getParameter();        for (int i = 0; i < para.length; i++)        {            String name = para[i].getParameterName();            if (name.equals("AD_Client_ID"))                m_AD_Client_ID = ((BigDecimal)para[i].getParameter()).intValue();            else if (name.equals("AD_Org_ID"))				m_AD_Org_ID = ((BigDecimal)para[i].getParameter()).intValue();            else if (name.equals("DeleteOldImported"))                m_deleteOldImported = "Y".equals(para[i].getParameter());            else                log.log(Level.SEVERE, "Unknown Parameter: " + name);        }        if (m_DateValue == null)            m_DateValue = DB.getTimestampForOrg(Env.getCtx());    }    /**     * Corre el proceso.     * @return Un mensaje de estado     * @throws Exception     */    protected String doIt() throws Exception {                StringBuffer sql = null;        int no = 0;        String clientCheck = " AND AD_Client_ID=" + m_AD_Client_ID;        //  ****    Prepare ****        //  Delete Old Imported        if (m_deleteOldImported)        {            sql = new StringBuffer ("DELETE I_EXME_Ocupacion_Clas "                + "WHERE I_IsImported='Y'").append(clientCheck);            no = DB.executeUpdate(sql.toString());            log.info("Delete Old Impored =" + no);        }        //  Set Client, Org, IaActive, Created/Updated,     ProductType        sql = new StringBuffer ("UPDATE I_EXME_Ocupacion_Clas "            + "SET AD_Client_ID = COALESCE (AD_Client_ID, ").append(m_AD_Client_ID).append("),"            + " AD_Org_ID = COALESCE (AD_Org_ID, ").append(m_AD_Org_ID).append("),"            + " IsActive = COALESCE (IsActive, 'Y'),"            + " Created = COALESCE (Created, SysDate),"            + " CreatedBy = COALESCE (CreatedBy, 0),"            + " Updated = COALESCE (Updated, SysDate),"            + " UpdatedBy = COALESCE (UpdatedBy, 0),"            + " I_ErrorMsg = NULL,"            + " I_IsImported = 'N' "            + "WHERE I_IsImported<>'Y' OR I_IsImported IS NULL");
        no = DB.executeUpdate(sql.toString());        log.info("Reset=" + no);
//      -------------------------------------------------------------------
        int noInsert = 0;        int noUpdate = 0;        //int noInsertPO = 0;        //int noUpdatePO = 0;        //  Go through Records        log.fine("start inserting/updating ...");        sql = new StringBuffer ("SELECT I_EXME_Ocupacion_Clas_ID, EXME_Ocupacion_Clas_ID "            + "FROM I_EXME_Ocupacion_Clas WHERE I_IsImported='N'").append(clientCheck);        Connection conn = DB.createConnection(false, Connection.TRANSACTION_READ_COMMITTED);                PreparedStatement pstmt = null;        ResultSet rs = null;       
        try        {            //  Insertar subtipo de producto a partir de la importacion            PreparedStatement pstmt_insertOcupacionClas = conn.prepareStatement                ("INSERT INTO EXME_Ocupacion_Clas  (EXME_Ocupacion_Clas_ID,"                + "AD_Client_ID,AD_Org_ID,IsActive,Created,CreatedBy,Updated,UpdatedBy,"                + "Value,Description,Puntaje)  "                + "SELECT ?,"                + "AD_Client_ID,AD_Org_ID,'Y',SysDate,CreatedBy,SysDate,UpdatedBy,"                + "Value,Description,Puntaje "                + "FROM I_EXME_Ocupacion_Clas "                + "WHERE I_EXME_Ocupacion_Clas_ID=?");            //  Set Imported = Y  a la tabla temporal            PreparedStatement pstmt_setImported = conn.prepareStatement                ("UPDATE I_EXME_Ocupacion_Clas SET I_IsImported='Y', EXME_Ocupacion_Clas_ID=?, "                + "Updated=SysDate, Processed='Y' WHERE I_EXME_Ocupacion_Clas_ID=?");

           //            pstmt = DB.prepareStatement(sql.toString(), null);            rs = pstmt.executeQuery();            while (rs.next())            {                int I_EXME_Ocupacion_Clas_ID = rs.getInt(1);                int EXME_Ocupacion_Clas_ID = rs.getInt(2);                //boolean newOcupacion = EXME_Ocupacion_Clas_ID == 0;                log.fine("I_EXME_Ocupacion_Clas_ID=" + I_EXME_Ocupacion_Clas_ID + ", EXME_Ocupacion_Clas_ID=" + EXME_Ocupacion_Clas_ID);                    try                    {                        EXME_Ocupacion_Clas_ID = DB.getNextID(m_AD_Client_ID, "EXME_Ocupacion_Clas", null);                        if (EXME_Ocupacion_Clas_ID <= 0)                            throw new DBException("No Next ID (" + EXME_Ocupacion_Clas_ID + ")");                        pstmt_insertOcupacionClas.setInt(1, EXME_Ocupacion_Clas_ID);                        pstmt_insertOcupacionClas.setInt(2, I_EXME_Ocupacion_Clas_ID);                        //                        no = pstmt_insertOcupacionClas.executeUpdate();                        log.finer("Insert Ocupacion Clas = " + no);                        noInsert++;                    }                    catch (Exception ex)                    {                        log.warning("Insertando Ocupacion Clas- " + ex.toString());                        sql = new StringBuffer ("UPDATE I_EXME_Ocupacion_Clas i "                            + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||")                            .append(DB.TO_STRING("Insertando subtipo producto: " + ex.toString()))                            .append("WHERE I_EXME_Ocupacion_Clas_ID=").append(I_EXME_Ocupacion_Clas_ID);                        DB.executeUpdate(sql.toString());                        continue;                    }                                        //  Update I_EXME_Diagnostico                    pstmt_setImported.setInt(1, EXME_Ocupacion_Clas_ID);                    pstmt_setImported.setInt(2, I_EXME_Ocupacion_Clas_ID);                    no = pstmt_setImported.executeUpdate();                    //                    conn.commit();                }            rs.close();            pstmt.close();            //            pstmt_insertOcupacionClas.close();            pstmt_setImported.close();
            //            conn.close();            conn = null;        }        catch (SQLException e)        {            try            {                if (conn != null)                    conn.close();                conn = null;                if(rs != null)                    rs.close();                if(pstmt != null)                    pstmt.close();            }            catch (SQLException ex)            {            }            log.log(Level.SEVERE, "doIt", e);            rs=null;            pstmt=null;
            throw new Exception ("doIt", e);        }        finally        {            if (conn != null)                conn.close();            conn = null;            if(rs != null)                rs.close();            if(pstmt != null)                pstmt.close();            rs=null;            pstmt=null;        }        //  Set Error to indicator to not imported        sql = new StringBuffer ("UPDATE I_EXME_Ocupacion_Clas "            + "SET I_IsImported='N', Updated=SysDate "            + "WHERE I_IsImported<>'Y'").append(clientCheck);        no = DB.executeUpdate(sql.toString());        addLog (0, null, new BigDecimal (no), "@Errors@");        addLog (0, null, new BigDecimal (noInsert), "@M_Ocupacion_Clas_ID@: @Inserted@");        addLog (0, null, new BigDecimal (noUpdate), "@M_Ocupacion_Clas_ID@: @Updated@");        return "";           }}